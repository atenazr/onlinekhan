<#@ template debug="true" hostSpecific="true" language="C#"  #>
<#@ output extension=".cs" encoding="utf-8" #>
<#@ Assembly Name="System.Core" #>
<#@ Assembly Name="System.Windows.Forms" #>
<#@ import namespace="System" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Diagnostics" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #>
<#
	string modelName = "Ratio";
	string instanceName = "ratio";
	string faName = "ضریب";
#>
using System;
using System.Collections.Generic;
using System.Data.Entity;
using System.Linq;
using AutoMapper;
using NasleGhalam.Common;
using NasleGhalam.DataAccess.Context;
using NasleGhalam.DomainClasses.Entities;
using NasleGhalam.ViewModels;
using NasleGhalam.ViewModels.<#= modelName #>;

namespace NasleGhalam.ServiceLayer.Services
{
	public class <#= modelName #>Service
	{
		private const string Title = "<#= faName #>";
        private readonly IUnitOfWork _uow;
        private readonly IDbSet<<#= modelName #>> _<#= instanceName #>s;
       
	    public <#= modelName #>Service(IUnitOfWork uow)
        {
            _uow = uow;
            _<#= instanceName #>s = uow.Set<<#= modelName #>>();
        }


		/// <summary>
        /// گرفتن  <#= faName #> با آی دی
        /// </summary>
        /// <param name="id"></param>
        /// <returns></returns>
        public <#= modelName #>ViewModel GetById(int id)
        {
            return _<#= instanceName #>s
                .Where(current => current.Id == id)
                .Select(current => new <#= modelName #>ViewModel
                {
                    Id = current.Id
                }).FirstOrDefault();
        }


		/// <summary>
        /// گرفتن همه <#= faName #> ها
        /// </summary>
        /// <returns></returns>
        public IList<<#= modelName #>ViewModel> GetAll()
        {
            return _<#= instanceName #>s.Select(current => new <#= modelName #>ViewModel()
            {
                Id = current.Id,
            }).ToList();
        }


		/// <summary>
        /// ثبت <#= faName #>
        /// </summary>
        /// <param name="<#= instanceName #>ViewModel"></param>
        /// <returns></returns>
        public MessageResult Create(<#= modelName #>ViewModel <#= instanceName #>ViewModel)
        {
            var <#= instanceName #> = Mapper.Map<<#= modelName #>>(<#= instanceName #>ViewModel);
            _<#= instanceName #>s.Add(<#= instanceName #>);

			MessageResult msgRes =  _uow.CommitChanges(CrudType.Create, Title);
			msgRes.Id = <#= instanceName #>.Id;
            return msgRes;
        }


		/// <summary>
        /// ویرایش <#= faName #>
        /// </summary>
        /// <param name="<#= instanceName #>ViewModel"></param>
        /// <returns></returns>
        public MessageResult Update(<#= modelName #>ViewModel <#= instanceName #>ViewModel)
        {
            var <#= instanceName #> = Mapper.Map<<#= modelName #>>(<#= instanceName #>ViewModel);
            _uow.MarkAsChanged(<#= instanceName #>);

			
			return  _uow.CommitChanges(CrudType.Update, Title);
			
        }


		/// <summary>
        /// حذف <#= faName #>
        /// </summary>
        /// <param name="id"></param>
        /// <returns></returns>
        public MessageResult Delete(int id)
        {
			var  <#= instanceName #>ViewModel = GetById(id);
            if (<#= instanceName #>ViewModel == null)
            {
                return Utility.NotFoundMessage();
            }

            var <#= instanceName #> = Mapper.Map<<#= modelName #>>(<#= instanceName #>ViewModel);
            _uow.MarkAsDeleted(<#= instanceName #>);
            
			return  _uow.CommitChanges(CrudType.Delete, Title);
			
        }


        /// <summary>
        /// گرفتن همه <#= faName #> ها برای لیست کشویی
        /// </summary>
        /// <returns></returns>
        public IList<SelectViewModel> GetAllDdl()
        {
            return _<#= instanceName #>s.Select(current => new SelectViewModel
            {
                value = current.Id,
                label = current.Name
            }).ToList();
        }
	}
}
